<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/BasisForGSAlgo/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/BasisForGSAlgo/" rel="alternate" type="text/html" /><updated>2020-04-10T20:18:27+09:00</updated><id>http://localhost:4000/BasisForGSAlgo/feed.xml</id><title type="html">Basis for GSAlgo</title><subtitle>경산과학고등학교 정보 동아리
</subtitle><entry><title type="html">2.Binary search</title><link href="http://localhost:4000/BasisForGSAlgo/algorithm/binary-search/" rel="alternate" type="text/html" title="2.Binary search" /><published>2020-04-10T00:00:00+09:00</published><updated>2020-04-10T00:00:00+09:00</updated><id>http://localhost:4000/BasisForGSAlgo/algorithm/binary-search</id><content type="html" xml:base="http://localhost:4000/BasisForGSAlgo/algorithm/binary-search/">&lt;p&gt;앞에서 이상한? 복잡도니 컴퓨터니를 얘기해놓고 뭔 이상한 영어인가 싶겠지만…&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Binary search&lt;/code&gt;는 중요하고 심지어 이미 사용해본 적이 있을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Binary search&lt;/code&gt;를 번역하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;이분 탐색&lt;/code&gt;이 되는데, 이 이분 탐색은 정렬된 데이터에서(단조성을 띄고 있을때) 아주 많이 유용하게 쓰인다.&lt;/p&gt;

&lt;p&gt;그냥 얘기를 하자면, &lt;strong&gt;중요하다&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;problems&quot;&gt;Problems&lt;/h3&gt;

&lt;h4 id=&quot;1-1&quot;&gt;1-1&lt;/h4&gt;

&lt;p&gt;길이가 n인 정수형 일차원 배열에 값들이 저장되어 있다. 주어진 값을 가지는 원소의 위치를 알아내는 방법을 생각해보자.&lt;/p&gt;

&lt;h4 id=&quot;1-2&quot;&gt;1-2&lt;/h4&gt;

&lt;p&gt;만약 값들이 정렬되어 있다면 어떤 방법으로 원소를 찾을 수 있을까?&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;2-1&quot;&gt;2-1&lt;/h4&gt;

&lt;p&gt;재윤이는 영민이와 up-down게임을 한다 (1~n까지 숫자 사이에 답이 있다).&lt;/p&gt;

&lt;p&gt;정보선생님은 공평한 게임을 위해서 ans를 1~n까지 임의의 숫자중에 램덤하게 정하고, 답을 확인하기 위한 함수를 만들었다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;둘 줄에서 답을 확인하기 위한 함수 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check()&lt;/code&gt;를 적게 사용한 사람이 이기게 된다.&lt;/p&gt;

&lt;p&gt;게임을 푸는 코드를 작성하라.&lt;/p&gt;

&lt;h4 id=&quot;2-2&quot;&gt;2-2&lt;/h4&gt;

&lt;p&gt;다음은 재윤이가 작성한 코드이다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 영민이가 작성한 코드이다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//이잉?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;둘 중에 누가 이길지 예측하고, 시간복잡도, 공간복잡도를 분석해보자.&lt;/p&gt;

&lt;h2 id=&quot;마무리-하면서&quot;&gt;마무리 하면서&lt;/h2&gt;

&lt;p&gt;추가로 이분탐색을 연습할 수 있는 문제들이다.&lt;/p&gt;</content><author><name>JaeyunK</name></author><category term="binary search" /><summary type="html">앞에서 이상한? 복잡도니 컴퓨터니를 얘기해놓고 뭔 이상한 영어인가 싶겠지만…</summary></entry><entry><title type="html">C++ Operation Precendence</title><link href="http://localhost:4000/BasisForGSAlgo/programming/order-of-operation/" rel="alternate" type="text/html" title="C++ Operation Precendence" /><published>2020-03-12T00:00:00+09:00</published><updated>2020-03-12T00:00:00+09:00</updated><id>http://localhost:4000/BasisForGSAlgo/programming/order-of-operation</id><content type="html" xml:base="http://localhost:4000/BasisForGSAlgo/programming/order-of-operation/">&lt;p&gt;연산자 우선순위는 사실 코드를 작성하면서 크게 신경쓰지 않는 부분이나. 다른사람이 작성한 코드를 보거나, 내신에는 기가막기게 내기 좋으니 알아두는게 좋다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 항상 비트연산 우선순위 꼬여서 틀린다…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Precedence&lt;/th&gt;
      &lt;th&gt;Operator&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Associativity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;::&lt;/td&gt;
      &lt;td&gt;Scope resolution&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;a++   a−−&lt;/td&gt;
      &lt;td&gt;Suffix/postfix increment and decrement&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;type()   type{}&lt;/td&gt;
      &lt;td&gt;Functional cast&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;a()&lt;/td&gt;
      &lt;td&gt;Function call&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;a[]&lt;/td&gt;
      &lt;td&gt;Subscript&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;.   -&amp;gt;&lt;/td&gt;
      &lt;td&gt;Member access&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;++a   −−a&lt;/td&gt;
      &lt;td&gt;Prefix increment and decrement&lt;/td&gt;
      &lt;td&gt;Right-to-left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;+a   −a&lt;/td&gt;
      &lt;td&gt;Unary plus and minus&lt;/td&gt;
      &lt;td&gt;Right-to-left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;!   ~&lt;/td&gt;
      &lt;td&gt;Logical NOT and bitwise NOT&lt;/td&gt;
      &lt;td&gt;Right-to-left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;(type)&lt;/td&gt;
      &lt;td&gt;C-style cast&lt;/td&gt;
      &lt;td&gt;Right-to-left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;*a&lt;/td&gt;
      &lt;td&gt;Indirection (dereference)&lt;/td&gt;
      &lt;td&gt;Right-to-left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;&amp;amp;a&lt;/td&gt;
      &lt;td&gt;Address-of&lt;/td&gt;
      &lt;td&gt;Right-to-left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;sizeof&lt;/td&gt;
      &lt;td&gt;Size-of[note 1]&lt;/td&gt;
      &lt;td&gt;Right-to-left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;co_await&lt;/td&gt;
      &lt;td&gt;await-expression (C++20)&lt;/td&gt;
      &lt;td&gt;Right-to-left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;new   new[]&lt;/td&gt;
      &lt;td&gt;Dynamic memory allocation&lt;/td&gt;
      &lt;td&gt;Right-to-left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;delete   delete[]&lt;/td&gt;
      &lt;td&gt;Dynamic memory deallocation&lt;/td&gt;
      &lt;td&gt;Right-to-left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;.&lt;em&gt;   -&amp;gt;&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;Pointer-to-member&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;a*b   a/b   a%b&lt;/td&gt;
      &lt;td&gt;Multiplication, division, and remainder&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;a+b   a−b&lt;/td&gt;
      &lt;td&gt;Addition and subtraction&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;«   »&lt;/td&gt;
      &lt;td&gt;Bitwise left shift and right shift&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;&amp;lt;=&amp;gt;&lt;/td&gt;
      &lt;td&gt;Three-way comparison operator (since C++20)&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;&amp;lt;   &amp;lt;=&lt;/td&gt;
      &lt;td&gt;For relational operators &amp;lt; and ≤ respectively&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;&amp;gt;   &amp;gt;=&lt;/td&gt;
      &lt;td&gt;For relational operators &amp;gt; and ≥ respectively&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;==   !=&lt;/td&gt;
      &lt;td&gt;For relational operators = and ≠ respectively&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;&amp;amp;&lt;/td&gt;
      &lt;td&gt;Bitwise AND&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;^&lt;/td&gt;
      &lt;td&gt;Bitwise XOR (exclusive or)&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;|&lt;/td&gt;
      &lt;td&gt;Bitwise OR (inclusive or)&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;&amp;amp;&amp;amp;&lt;/td&gt;
      &lt;td&gt;Logical AND&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;||&lt;/td&gt;
      &lt;td&gt;Logical OR&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;a?b:c&lt;/td&gt;
      &lt;td&gt;Ternary conditional[note 2]&lt;/td&gt;
      &lt;td&gt;Right-to-left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;throw&lt;/td&gt;
      &lt;td&gt;throw operator&lt;/td&gt;
      &lt;td&gt;Right-to-left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;=&lt;/td&gt;
      &lt;td&gt;Direct assignment (provided by default for C++ classes)&lt;/td&gt;
      &lt;td&gt;Right-to-left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;+=   −=&lt;/td&gt;
      &lt;td&gt;Compound assignment by sum and difference&lt;/td&gt;
      &lt;td&gt;Right-to-left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;*=   /=   %=&lt;/td&gt;
      &lt;td&gt;Compound assignment by product, quotient, and remainder&lt;/td&gt;
      &lt;td&gt;Right-to-left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;«=   »=&lt;/td&gt;
      &lt;td&gt;Compound assignment by bitwise left shift and right shift&lt;/td&gt;
      &lt;td&gt;Right-to-left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;&amp;amp;=   ^=   |=&lt;/td&gt;
      &lt;td&gt;Compound assignment by bitwise AND, XOR, and OR&lt;/td&gt;
      &lt;td&gt;Right-to-left&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;,&lt;/td&gt;
      &lt;td&gt;Comma&lt;/td&gt;
      &lt;td&gt;Left-to-right&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;Reference : &lt;a href=&quot;cppreference.com&quot;&gt;cppreference.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">연산자 우선순위는 사실 코드를 작성하면서 크게 신경쓰지 않는 부분이나. 다른사람이 작성한 코드를 보거나, 내신에는 기가막기게 내기 좋으니 알아두는게 좋다. Note: 항상 비트연산 우선순위 꼬여서 틀린다…</summary></entry><entry><title type="html">Floating point</title><link href="http://localhost:4000/BasisForGSAlgo/programming/floating-point/" rel="alternate" type="text/html" title="Floating point" /><published>2020-03-11T00:00:00+09:00</published><updated>2020-03-11T00:00:00+09:00</updated><id>http://localhost:4000/BasisForGSAlgo/programming/floating-point</id><content type="html" xml:base="http://localhost:4000/BasisForGSAlgo/programming/floating-point/">&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Floating point&lt;/code&gt;(부동소수점)이란 컴퓨터에서 실수를 표현하는 방법중에 하나이다.
특히 이 글에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IEEE 754&lt;/code&gt;의 2진 표기에 대해 알아본다.
(2진법에 대해서는 다른 글을 참조하라.)&lt;/p&gt;

&lt;h1 id=&quot;ieee-754&quot;&gt;IEEE 754&lt;/h1&gt;

&lt;h2 id=&quot;부동소수점의-표현&quot;&gt;부동소수점의 표현&lt;/h2&gt;

&lt;p&gt;부동소수점은 3가지 부분으로 나눠서 표현한다. (MLB부터 순서대로)
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sign&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exponent&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fraction&lt;/code&gt; 각각 부호부, 지수부, 가수부를 뜻하는 말이다. 
또 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;single precision&lt;/code&gt;의 경우 32bit, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;double precision&lt;/code&gt;의 경우 64bit를 사용한다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Sign&lt;/th&gt;
      &lt;th&gt;Exponent&lt;/th&gt;
      &lt;th&gt;Fraction&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;single precision&lt;/td&gt;
      &lt;td&gt;1bit&lt;/td&gt;
      &lt;td&gt;8bit&lt;/td&gt;
      &lt;td&gt;23bit&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;double precision&lt;/td&gt;
      &lt;td&gt;1bit&lt;/td&gt;
      &lt;td&gt;11bit&lt;/td&gt;
      &lt;td&gt;52bit&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;각각의 부분이 어떻게 저장되는지 적어보면 다음과 같이 표현할 수 있다.&lt;/p&gt;

&lt;p&gt;single precision: SEEEEEEE EFFFFFFF FFFFFFFF FFFFFFFF&lt;br /&gt;
double precision: SEEEEEEE EEEEFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF&lt;/p&gt;

&lt;p&gt;이제 각각의 부분에 대해서 좀더 살펴 보자.&lt;/p&gt;

&lt;h3 id=&quot;부호부&quot;&gt;부호부&lt;/h3&gt;
&lt;p&gt;부호를 나타내는 부분이다. (부동 소수점의 경우 절대값 부호화를 사용한다)&lt;/p&gt;

&lt;p&gt;0일때 양수 1일때 음수를 뜻한다&lt;/p&gt;

&lt;h3 id=&quot;지수부&quot;&gt;지수부&lt;/h3&gt;

&lt;p&gt;부동소수점이라는 이름에 맞게 소수점을 움직여주는데, 그때 2의 거듭제곱을 이용해서 소수점을 옴직일 수 있다.&lt;/p&gt;

&lt;p&gt;지수부는 2의 거듭제곱에서 지수를 나타내는 값으로 음수가 될수도 있고, 양수가 될 수도 있으므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bias&lt;/code&gt;를 이용해서 양과 음을 모두 가지는 지수를 나타낸다
single precision(32bit)일 때 bias는 $2^7-1$이 된다. &lt;br /&gt;
double precision(64bit)일 때 bias는 $2^{10}-1$이다.&lt;/p&gt;

&lt;p&gt;지수부가 나타내는 수에서 bias를 뺀 값이 실제 지수가 된다.&lt;/p&gt;

&lt;h3 id=&quot;가수부&quot;&gt;가수부&lt;/h3&gt;
&lt;p&gt;가수부는 정규화 되어있다. 이 말은 2의 거듭제곱을 이용해서 같은 소수를 여러개의 형태로 나타낼 수 있는데 그중에서 소수점 왼쪽의 수가 1되게 했다는 뜻이다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; $101.111 \to 1.01111*2^2$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;정규화가 되어있기 때문에 소수점 아래 부분만 지수부에 표현되어 있다.&lt;/p&gt;

&lt;h3 id=&quot;2진수로-나타내기&quot;&gt;2진수로 나타내기&lt;/h3&gt;
&lt;p&gt;다음과 같은 과정을 거쳐서 2진수로 나타낼 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;부호부가 0이면 양수, 1이면 음수로 설정한다.&lt;/li&gt;
  &lt;li&gt;가수부에 있는 값을 0.f로 바꿔준 다음 1을 더해준다.&lt;/li&gt;
  &lt;li&gt;지수부의 수가 $a$라고 하면 $2^{a-bias}$를 곱해준다. (bias는 위에서 언급한 것과 같이 singleprecision에서 127, double precision에서 1023이다)&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;예외-규칙&quot;&gt;예외 규칙&lt;/h2&gt;

&lt;h3 id=&quot;denormalized&quot;&gt;Denormalized&lt;/h3&gt;
&lt;p&gt;만약 지수부가 모두 0으로만 이루어져 있다면 다면 정규화 되지 않은것으로 생각을 한다.&lt;/p&gt;

&lt;p&gt;그리고 지수부는 single precision일때 $2^{-126}$이고 double precision일때 $2^{-1022}$가 된다.&lt;/p&gt;

&lt;h3 id=&quot;영&quot;&gt;영&lt;/h3&gt;
&lt;p&gt;부호부를 제외한 모든 값이 0이 될때 +0, -0이 된다.&lt;br /&gt;
주의할 점은 부호가 다른것은 개별적으로 존재하지만 비교하면 같다는 결과가 나온다.&lt;/p&gt;

&lt;h3 id=&quot;무한&quot;&gt;무한&lt;/h3&gt;
&lt;p&gt;지수부가 모두 1이고 가수부가 모두 0이면 $+\infty$, $-\infty$가 된다&lt;/p&gt;

&lt;h3 id=&quot;숫자가-아닌-것&quot;&gt;숫자가 아닌 것&lt;/h3&gt;
&lt;p&gt;NaN(not a number)는 지수부가 모두 1이지만 가수부가 모두 0이 아닌 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;참조: &lt;a href=&quot;https://steve.hollasch.net/cgindex/coding/ieeefloat.html&quot;&gt;https://steve.hollasch.net/cgindex/coding/ieeefloat.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="FloatingPoint" /><category term="DataType" /><category term="IEEE754" /><summary type="html">Floating point(부동소수점)이란 컴퓨터에서 실수를 표현하는 방법중에 하나이다. 특히 이 글에서는 IEEE 754의 2진 표기에 대해 알아본다. (2진법에 대해서는 다른 글을 참조하라.)</summary></entry><entry><title type="html">1.Introduction</title><link href="http://localhost:4000/BasisForGSAlgo/algorithm/introduction/" rel="alternate" type="text/html" title="1.Introduction" /><published>2020-03-05T00:00:00+09:00</published><updated>2020-03-05T00:00:00+09:00</updated><id>http://localhost:4000/BasisForGSAlgo/algorithm/introduction</id><content type="html" xml:base="http://localhost:4000/BasisForGSAlgo/algorithm/introduction/">&lt;p&gt;이 교재?를 쓰는 사람(&lt;strong&gt;JayunK&lt;/strong&gt;)은 문제를 푸는 것이 최고라고 생각을 한다.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;(그러면서 지가 더 안풀죠?)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;JaeyunK는 설명을 하기 싫어서 본인이 생각하게 하는 것을 좋아하기 때문에, 설명은 거의 없이 교재를 만들려고 문제만 넣으려고 했다…&lt;/p&gt;

&lt;p&gt;그러나 딱 봐도, 욕을 먹을거 같아서(…) 정답을 약간씩 넣어주면서 만들려고 한다.&lt;/p&gt;

&lt;p&gt;(사실 성실하게 넣지는 않는다..)&lt;/p&gt;

&lt;p&gt;추가로 이 교재를 쓰는 사람도 알고리즘을 잘 하는것은 아니니 이해 부탁한다. (^^)&lt;/p&gt;

&lt;p&gt;무엇보다도 이 교재의 목적은 ”적어도 요건 알아야지…” 니깐? 가볍게 읽으면 된다!&lt;/p&gt;

&lt;p&gt;(그렇다고 모르면 곤난하다)&lt;/p&gt;

&lt;p&gt;요약 : 내용을 너무 믿지는 말고, 알아둬서 손해보지는 않을 내용일 것이다?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 요새는 세상이 좋아져서 대학교 강의가 다 공개 되어 있으니 그걸 같이 듣는게 더 좋을듯…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt; Erik Demaine, and Srini Devadas. _6.006 Introduction to Algorithms. _Fall 2011. Massachusetts Institute of Technology: MIT OpenCourseWare, &lt;a href=&quot;https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011&quot;&gt;https://ocw.mit.edu&lt;/a&gt;. License: &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;Creative Commons BY-NC-SA&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;algorithm&quot;&gt;Algorithm&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;알고리즘&lt;/code&gt;은 어떤 문제를 해결하는 방법을 일련의 절차나 방법을 공식화 한 것이다.&lt;/p&gt;

&lt;p&gt;즉, 어떤 입력이 있을때, 알고리즘을 통해 출력으로 바꾸는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;프로그램&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;알고리즘&lt;/code&gt;의 차이는 다음과 같이 설명할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;프로그램&lt;/code&gt;을 만들기 위해서 우리는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;프로그래밍 언어&lt;/code&gt;로 코드를 짜고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;알고리즘&lt;/code&gt;을 만들기 위해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;의사코드&lt;/code&gt;라는 것을 작성하게 된다.&lt;/p&gt;

&lt;p&gt;또, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;프로그램&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;컴퓨터&lt;/code&gt;에서 돌아가는 반면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;알고리즘&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model of computation&lt;/code&gt;에서 작동한다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;program&lt;/th&gt;
      &lt;th&gt;algorithm&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;language&lt;/td&gt;
      &lt;td&gt;programming language&lt;/td&gt;
      &lt;td&gt;pseudo code&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;machine&lt;/td&gt;
      &lt;td&gt;computer&lt;/td&gt;
      &lt;td&gt;model of computation&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;model-of-computation&quot;&gt;model of computation&lt;/h2&gt;

&lt;p&gt;그렇다면, 우리가 알고리즘을 생각하기 위해서 만든 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model of computation&lt;/code&gt;은 무엇일까?&lt;/p&gt;

&lt;p&gt;model of computation은 알고리즘이 사용할 수 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;연산&lt;/code&gt;들과 그 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;비용&lt;/code&gt;을 가지고 있는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Random Access Machine&lt;/code&gt; (RAM)을 대표적인 예로 들 수 있는데, 흔히들 아는 RAM은 Random access memory의 약자로, 메모리의 임의의 위치의 공간에 접근, 조작, 저장을 상수시간에 할 수 있는 메모리를 뜻하고, Random Access Machine에서와 거의 같은 일을 한다.&lt;/p&gt;

&lt;p&gt;Random Access Machine은&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;아주 큰 메모리 공간을 가지고 있고 임의의 메모리 공간에서&lt;/li&gt;
  &lt;li&gt;$\Theta(1)$ 시간에 $O(1)$ words를 불러오고, $O(1)$ 연산을 하며, $O(1)$ words를 저장할 수 있다.&lt;/li&gt;
  &lt;li&gt;이때, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;word&lt;/code&gt;는 w bits를 의미한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  사실 몰라도 된다…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;시간복잡도와-공간복잡도&quot;&gt;시간복잡도와 공간복잡도&lt;/h2&gt;

&lt;h3 id=&quot;일러두는-말&quot;&gt;일러두는 말&lt;/h3&gt;

&lt;p&gt;위에서 조금 이상한 말을 한 것 같겠지만, 복잡도를 이해하는데 큰 도움이 된다.&lt;/p&gt;

&lt;h3 id=&quot;problems&quot;&gt;Problems&lt;/h3&gt;

&lt;p&gt;다음 문제는 복잡도를 알아보기 위한 문제이다.&lt;/p&gt;

&lt;h4 id=&quot;1-1&quot;&gt;1-1&lt;/h4&gt;

&lt;p&gt;1부터 n까지의 자연수의 합을 구하고 싶다. 컴퓨터를 이용해서 이 작업을 하려면 어떤 방법이 있을까?&lt;/p&gt;

&lt;h4 id=&quot;1-2&quot;&gt;1-2&lt;/h4&gt;

&lt;p&gt;이 두 방법의 차이를 생각해보자.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 연산을 수행하는 횟수를 생각해보자&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;2-1&quot;&gt;2-1&lt;/h4&gt;

&lt;p&gt;n번째 피보나치수를 구하고 싶다. 어떻게 하면 될까?&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 피보나치 수는 다음과 같은 점화식으로 만들어 진다 &lt;del&gt;(이건 상식)&lt;/del&gt;
&lt;script type=&quot;math/tex&quot;&gt;\begin{cases}
F_1 = 1, \;\;\;\;\; F_2 = 1 \\
F_{n+2} = F_{n+1} +  F_{n}    (n\in\mathbb{N})
\end{cases}&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;2-2&quot;&gt;2-2&lt;/h4&gt;

&lt;p&gt;두 방법에서 차이를 생각해보자&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fibo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fibo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now_fibo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before_fibo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now_fibo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;now_fibo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now_fibo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before_fibo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;before_fibo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now_fibo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 메모리(변수)를 얼마나 사용하는지 생각해보자&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;마무리-하면서&quot;&gt;마무리 하면서&lt;/h2&gt;</content><author><name>Jaeyun Kim</name></author><category term="time complexity" /><category term="sapce complexity" /><category term="computation" /><summary type="html">이 교재?를 쓰는 사람(JayunK)은 문제를 푸는 것이 최고라고 생각을 한다.</summary></entry></feed>